// this program is automatically generated by jenerator. do not edit.
#include "../framework.hpp"
#include "anomaly_server.hpp"
#include "anomaly_serv.hpp"
using namespace jubatus;
using namespace jubatus::framework;
namespace jubatus { namespace server {
class anomaly_impl_ : public anomaly<anomaly_impl_>
{
public:
  anomaly_impl_(const server_argv& a):
    anomaly<anomaly_impl_>(a.timeout),
    p_(new anomaly_serv(a))
  { p_->use_cht();}

  bool set_config(std::string name, config_data c) //update broadcast
  { JWLOCK__(p_); return p_->set_config(c); }

  config_data get_config(std::string name) //analysis random
  { JRLOCK__(p_); return p_->get_config(); }

  bool clear_row(std::string name, std::string id) //update cht(2)
  { JWLOCK__(p_); return p_->clear_row(id); }

  std::pair<std::string,float > add(std::string name, datum d) //nolock random
  { NOLOCK__(p_); return p_->add(d); }

  float update(std::string name, std::string id, datum d) //update cht(2)
  { JWLOCK__(p_); return p_->update(id, d); }

  bool clear(std::string name) //update broadcast
  { JWLOCK__(p_); return p_->clear(); }

  float calc_score(std::string name, datum d) //analysis random
  { JRLOCK__(p_); return p_->calc_score(d); }

  std::vector<std::string > get_all_rows(std::string name) //analysis broadcast
  { JRLOCK__(p_); return p_->get_all_rows(); }

  bool save(std::string name, std::string arg1) //update broadcast
  { JWLOCK__(p_); return p_->save(arg1); }

  bool load(std::string name, std::string arg1) //update broadcast
  { JWLOCK__(p_); return p_->load(arg1); }

  std::map<std::string,std::map<std::string,std::string > > get_status(std::string name) //analysis broadcast
  { JRLOCK__(p_); return p_->get_status(); }
  int run(){ return p_->start(*this); };
  common::cshared_ptr<anomaly_serv> get_p(){ return p_; };
private:
  common::cshared_ptr<anomaly_serv> p_;
};
}} // namespace jubatus::server
int main(int args, char** argv){
  return
    jubatus::framework::run_server<jubatus::server::anomaly_impl_,
                                   jubatus::server::anomaly_serv>
       (args, argv, "anomaly");
}
