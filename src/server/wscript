def options(opt):
  pass

def configure(conf):
  pass


def make_ml_machine(bld, name, libraries = ''):
  server_source = name + '_main.cpp'
  bld.program(
    source = server_source,
    target = 'juba' + name,
    includes = '.',
    use = libraries + ' jubaconverter jubatus_framework'
    )

  if bld.env.HAVE_ZOOKEEPER_H:
    keeper_source = name + '_keeper.cpp'
    bld.program(
      source = keeper_source,
      target = 'juba' + name + '_keeper',
      includes = '.',
      use = 'jubatus_framework'
      )

  bld.program(
    source = name + '_test.cpp',
    target = name + '_test',
    includes = '.',
    use = libraries + ' PFICOMMON jubaconverter jubatus_framework'
    )


def build(bld):

  #####################3
  ### old code begins
  #classifier
  classifier_source = 'classifier_serv.cpp'
  bld.stlib(
    source = classifier_source,   target = 'jubatus_classifier',   includes = '.',
    use = 'PFICOMMON jubaconverter jubaclassifier jubastorage jubacommon MSGPACK GLOG jubatus_framework'
    )
  bld.program(
    source = 'classifier.cpp',   target = 'jubaclassifier',
    includes = '.',   use = 'jubatus_classifier'
    )

  bld.program(
    features = 'gtest',
    source = 'classifier_serv_test.cpp',
    target = 'classifier_serv_test',
    includes = '.',
    use = 'jubatus_classifier'
    )

  # recommender
  recommender_source = 'recommender_serv.cpp server_util.cpp'
  if bld.env.HAVE_ZOOKEEPER_H:
    recommender_source += ' mixer.cpp'

  bld.stlib(
    source = recommender_source,
    target = 'jubatus_recommender',
    includes = '.',
    use = 'PFICOMMON jubaconverter jubarecommender jubacommon MSGPACK GLOG'
    )

  bld.program(
    source = 'recommender.cpp server_util.cpp',
    target = 'jubarecommender',
    includes = '.',
    use = 'jubatus_recommender'
    )

  bld.program(
    features = 'gtest',
    source = 'recommender_rpc_test.cpp',
    target = 'recommender_serv_test',
    includes = '.',
    use = 'jubatus_recommender'
    )
  ### old code end
  ###############################

  # new code starts
  framework_source = 'server_util.cpp'
  if bld.env.HAVE_ZOOKEEPER_H:
    framework_source +=  ' mixer.cpp'

  bld.shlib(
    source = framework_source,
    target = 'jubatus_framework',
    includes = '.',
    use = 'PFICOMMON jubacommon MSGPACK GLOG'
    )

  #new regression
  make_ml_machine(bld, 'regression', 'jubastorage jubatus_regression')

  #new classifier
  make_ml_machine(bld, 'classifier', 'jubastorage jubaclassifier')

  n = bld.path.get_bld().make_node('test_input')
  n.mkdir()
  bld(rule = 'cp ${SRC} ${TGT}',
      source = bld.path.ant_glob('test_input/*'),
      target = n)

  bld.install_files('${PREFIX}/include/jubatus/server',
                    ['classifier_rpc.hpp',
                     'diffv.hpp',
                     ])
