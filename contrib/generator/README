Generator: a user-defined machine learning system
=================================================

Problem description
-------------------

Jubatus is going to be a framework to implement `online machine learning which scales automatically`.
But currently it has only a set of direct implementations of classifier, regression and recommender.
And there are 9 x N declarations or implemenations for eash learning machine's API, where N is a number
of API. For example, classifier currently has 8 APIs (train, classify, set_config, get_config, save,
 load and get_status). Thus there're 9 x 7 = 63 reputations of function declarations or implementations.
Recommender has 12 APIs therefore we'd 84 reputations. (M variety of client libraries will increase
 the number: (M + 8) x N )

A developer of a new machine learning algorithm would have seen a misery of Do Repeat Yourself.


Moreover, composable feature conversion and machine learning must be available in a near future.
With direct implementation of C++ language it is very difficult to minimize the cost of user-
implementation. Deciding a specification of Domain Specific Language will enable us a
 under-the-wood optimization and interface improvement.


There are several preliminary condition - first of all, for all developers C++ should be available
because they have many existing software implementation of there exellent ML algorithms.
Secondly, the new system must have high usability to write, compile, deploy, test and use it. The
more difficult it is, the less developers will come.


Solution
========

Simple C++ code parser and a bit complex C++ code generator. Input specification of C++ code is
very simple and a subset of C++ language. Users can use the input C++ file as a simple internal
C++ module. Output is a set of C++ files that is to be assembled to the Jubatus servers: main
server that does mix, keeper server to be the gateway and the client library (in multiple
languages, if possible).

- Input: 'xxx.cpp' which implements developer's application 
- Output0: 'xxx.idl' which defines server-client interface in MsgPack-idl format
- Output1: 'xxx_impl.(h|c)pp' which implements developer's application in server-side.
- Output2: 'xxx_main.cpp' which includes 'main()'
- Output3: 'xxx_keeper.cpp' -- keeper implementation includes 'main()'


First goal and the following sequence
=====================================

#. Replace current classifier and recommender with a generated-code.
#. Make them composable.
#. General framework
