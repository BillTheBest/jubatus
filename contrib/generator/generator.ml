
open Util

let make_mprpc_decl (retval,n,argv,decs,_,_) =
  "// " ^ (String.concat ", " decs) ^ "\n"
  ^ "MPRPC_PROC(" ^ n ^ "),\tresult<" ^ (Stree.to_string retval) ^ ">("
  ^ (String.concat ", " ("string" :: (List.map Stree.to_string argv))) ^ ");\n";;

let gen_mprpc_decl name prototypes =
  let get_name (_,n,_,_,_,_) = n in
  let names = List.map get_name prototypes in
  "MPRPC_GEN(1, " ^ (String.concat ", " (name :: names)) ^ "); ";;

(* "jubatus" "sample" [prototype] => [source code filename] *)
(* string -> string -> prototypes list -> string list *)

class jubatus_module name_i namespace_i typedefs_i structdefs_i classdefs_i =
object (self)
  val name = name_i
  val namespace = namespace_i
  val typedefs = typedefs_i
  val structdefs = structdefs_i
  val classdefs = classdefs_i
  val mutable output = stdout

  val idlfile  = name_i ^ ".idl"
  val server_h = name_i ^ "_impl.hpp"
  val server_c = name_i ^ "_impl.cpp"
  val main_c   = name_i ^ "_main.cpp"
  val keeper_c = name_i ^ "_keeper.cpp"

  method generate_idl =
    print_endline ("==" ^ idlfile ^ "==");
    output <<< "# this idl is generated by program. do not edit. ";
    List.iter (fun t -> output <<< Idl_template.make_typedef t) typedefs;
    List.iter (fun m -> output <<< Idl_template.make_message m) structdefs;
    List.iter (fun c -> output <<< Idl_template.make_service c) classdefs;
    
  method generate_impl =
    print_endline ("==" ^ server_c ^ "==");
(*    output <<< include_dq ["server.hpp"; "../common/cmdline.h"];
    let namespaces = [namespace; "server"] in
    output <<< make_ns_begin namespaces;
    List.iter (fun c -> output <<< Server_template.make_class c) classimpls;
    output <<< make_ns_end namespaces;
    output <<< Server_template.make_main (); *)

  method generate_keeper =
(*    output <<< make_file_begin "keeper" name;
    output <<< Keeper_template.make_class_begin "jubakeeper";
    output <<< String.concat "\n" (List.map (Keeper_template.prototype2string "jubakeeper") prototypes); 
    output <<< Keeper_template.make_class_end "jubakeeper";
    output <<< make_file_end "keeper" name;
    print_endline ("==" ^ keeper_h ^ "==");
    print_endline ("==" ^ keeper_c ^ "=="); *)
(*    output <<< include_dq [keeper_h; front_rpc; back_rpc; ]; *)
    output <<< make_ns_begin [namespace; "keeper"];
(*    output <<< Keeper_template.constructor "jubakeeper";
    output <<< String.concat "\n" (List.map (Keeper_template.prototype2impl "jubakeeper") prototypes);
    output <<< Keeper_template.destructor "jubakeeper"; *)
    output <<< make_ns_end [namespace; "keeper"];

  method generate =
    output <- stdout;
    self#generate_idl;
    self#generate_impl;
(*    self#generate_server;
    self#generate_keeper; *)

end;;
